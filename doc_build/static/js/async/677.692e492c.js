"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["677"],{2784:function(n,e,t){t.r(e),t.d(e,{default:()=>s});var i=t(2676),d=t(453);function l(n){let e=Object.assign({h1:"h1",a:"a",div:"div",p:"p",code:"code",h2:"h2",h3:"h3",pre:"pre"},(0,d.ah)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.h1,{id:"一些常见的面试题",children:["一些常见的面试题",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#一些常见的面试题",children:"#"})]}),"\n",(0,i.jsxs)(e.div,{className:"rspress-directive note",children:[(0,i.jsx)(e.div,{className:"rspress-directive-title",children:"NOTE"}),(0,i.jsx)(e.div,{className:"rspress-directive-content",children:(0,i.jsxs)(e.p,{children:["这是一个 ",(0,i.jsx)(e.code,{children:"note"})," 类型的 ",(0,i.jsx)(e.code,{children:"block"}),"\n"]})})]}),"\n",(0,i.jsxs)(e.h2,{id:"防抖截流",children:["防抖截流",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#防抖截流",children:"#"})]}),"\n",(0,i.jsxs)(e.h3,{id:"防抖",children:["防抖",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#防抖",children:"#"})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            padding: 20px;\n        }\n        #inputField {\n            padding: 8px;\n            font-size: 16px;\n            width: 300px;\n        }\n        #output {\n            margin-top: 10px;\n            color: #333;\n        }\n        </style>\n</head>\n<body>\n    <h2>输入事件模拟（带防抖）</h2>\n    <input type="text" id="inputField" placeholder="请输入内容...">\n    <div id="output">结果将显示在这里</div>\n    <script src="./debounce.js"><\/script>\n</body>\n</html>\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-js",children:"// 防抖函数用于限制函数的执行频率，常用于处理高频触发的事件（如窗口调整、输入框输入等），确保在事件停止触发一段时间后才执行一次。\nfunction debounce(fn, delay) {\n    let timer = null\n    return function (...args) {\n        if (timer) {\n            clearTimeout(timer)\n        }\n        timer = setTimeout(() => {\n            fn(...args)\n            timer = null\n        }, delay)\n    }\n}\n// 获取 DOM 元素\nconst inputField = document.getElementById('inputField');\nconst output = document.getElementById('output');\n// 示例1: 模拟输入事件\nconst logInput = debounce((value) => {\n    output.textContent = `处理后的输入: ${value || '无内容'}`;\n    console.log(`输入值: ${value}`);\n}, 500);\n\n \n// 监听输入事件\ninputField.addEventListener('input', (event) => {\n    const value = event.target.value;\n    logInput(value);\n});\n// // 示例2: 窗口调整事件\nconst handleResize = debounce(() => {\n    console.log(\"窗口大小调整完成\");\n}, 300);\n\nwindow.addEventListener(\"resize\", handleResize); // 调整窗口时，只在停止调整 300ms 后执行\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"截流",children:["截流",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#截流",children:"#"})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n\n</head>\n<body>\n    <input type="text" id="input">\n    <div id="content">content:</div>\n</body>\n<script type="text/javascript">\n    // 更清晰的实现（修正解构赋值问题）\nfunction handler() {\n    const inputElement = document.getElementById("input");\n    document.getElementById("content").innerHTML = `内容: ${inputElement.value}`;\n}\n\n// 标准节流函数实现（保留上下文绑定能力）\nconst throttle = (fn, wait) => {\n    let timer;\n    return function (...args) {\n        if (!timer) {\n            timer = setTimeout(() => {\n                fn.apply(this, args); // 绑定正确的 this 上下文\n                timer = null;\n            }, wait);\n        }\n    };\n};\ndocument.addEventListener(\'input\',throttle(handler,300))\n<\/script>\n</html>\n'})})]})}function r(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,d.ah)(),n.components);return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(l,{...n})}):l(n)}let s=r;r.__RSPRESS_PAGE_META={},r.__RSPRESS_PAGE_META["guides%2Finterview%2Finterview.mdx"]={toc:[{text:"防抖截流",id:"防抖截流",depth:2},{text:"防抖",id:"防抖",depth:3},{text:"截流",id:"截流",depth:3}],title:"一些常见的面试题",headingTitle:"一些常见的面试题",frontmatter:{}}}}]);