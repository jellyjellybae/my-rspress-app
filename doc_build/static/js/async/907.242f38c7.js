"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["907"],{3036:function(n,e,t){t.r(e),t.d(e,{default:()=>d});var i=t(6773),r=t(453);function l(n){let e=Object.assign({p:"p",h1:"h1",a:"a",pre:"pre",code:"code",ul:"ul",li:"li",h2:"h2",strong:"strong",h3:"h3"},(0,r.ah)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.p,{children:"// import Mermaid from '@/components/Mermaid.js';"}),"\n",(0,i.jsxs)(e.h1,{id:"flutter",children:["flutter",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#flutter",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:'VScode 中 （Shift+Cmd+P）。开始输入“flutter new"'}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-flutter",children:"import 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(\n    Text(\n      (\"hello world\"),\n      textDirection: TextDirection.rtl,\n      style: TextStyle(fontSize: 100, color: Colors.white),\n    ),\n  );\n}\n\n// class MyApp(){\n\n// }\n\n"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["runApp 把传入的的 ",(0,i.jsx)(e.code,{children:"Widget"}),"显示在屏幕上，",(0,i.jsx)(e.code,{children:"Widget"})," 是 abstract class只能创建子类"]}),"\n",(0,i.jsx)(e.li,{children:"flutter中所有的页面显示元素都是Widget的子类,"}),"\n",(0,i.jsx)(e.li,{children:"MaterialApp主题，这样可以不用给Widget写方向，否则都要设置方向"}),"\n",(0,i.jsx)(e.li,{children:"MaterialApp 是主题,自带方向设置,所以他里面的包含的widget都不需要设置方向"}),"\n",(0,i.jsx)(e.li,{children:"在你的pubspec.yaml文件的flutter部分中有一个uses-material-design: true，为了使用预定义的Material图标集"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"ios/runner/info.plist\n\xb7\xb7\xb7\n<key>FLTEnableImpeller </key>\n	<false/>\n\xb7\xb7\xb7\n\n//pubspec.yaml文件\nname: my_app\nflutter:\n  uses-material-design: true\n\nimport 'package:flutter/material.dart';\n\nvoid main() {\nrunApp(MaterialApp(\n  home:Text('appp',style: TextStyle(fontSize: 100, color: Colors.white)),\n\n));\n}\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"const",children:["const",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#const",children:"#"})]}),"\n",(0,i.jsx)(e.p,{children:"Widget的嵌套,这里演示 Center居中组件 里面 child参数 嵌套 文本框Text"}),"\n",(0,i.jsx)(e.p,{children:"//注意函数返回类型不能不写,否则就变成dynamic 会报错"}),"\n",(0,i.jsx)(e.p,{children:"const 嵌套问题，最外层用了const，那么里面就不用加，如果里面有单独的不是const的，那么最外层不能是const"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"import 'package:flutter/material.dart';\n\nvoid main() {\n  String str=\"baby\";\nrunApp(\n  MaterialApp(\n  home:Center( \n    child: \n    Text(str,style: const TextStyle(fontSize: 100, color: Colors.white)), )\n\n));\n}\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"scaffold",children:["scaffold",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#scaffold",children:"#"})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-mermaid",children:"sequenceDiagram\n    Alice->>John: 你好 John!\n    John--\x3e>Alice: 你好 Alice!\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-dart",children:"void main() {\n  //变量在这里\n  runApp(\n    MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n          // leading: Text(\"左侧\"),\n          leading: Icon(Icons.home),\n          title: Text(\"navbar \"),\n          actions: [Text('back'), Icon(Icons.add)],\n        ),\n        floatingActionButton: FloatingActionButton(\n          onPressed: () {\n            print('点击了 ');\n          },\n          // child: Icon(Icons.add),\n          child: Text('click'),\n        ),\n        body: Row(\n          children: [\n            // Spacer(),//\n            TextButton(\n              onLongPress: (){\n                print('long press');\n              },\n              onPressed: () {\n                // print('TextBUtn点击了 ');\n              },\n              child: Text('click me right now'),\n            ),\n            TextButton(\n              onPressed: () {\n                print('TextBUtn点击了 ');\n              },\n              child:Icon(Icons.holiday_village) \n            ),\n           GestureDetector(\n              onDoubleTap: (){\n                print('双击了！！');\n              },\n              onLongPress: (){\n                print('长安了');\n              },\n            child:Text('Gensture')\n            ), \n          ],\n        ),\n      ),\n    ),\n  );\n}\n// class MyApp(){\n\n// }\n\n"})}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"GestureDetector"}),"\nGestureDetector小部件没有视觉表示，而是检测用户进行的手势。\n当用户点击child时，GestureDetector调用其回调函数"]}),"\n",(0,i.jsxs)(e.h2,{id:"build",children:["build",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#build",children:"#"})]}),"\n",(0,i.jsxs)(e.p,{children:["更改界面 ",(0,i.jsx)(e.strong,{children:"StatefulWidget"}),"中的",(0,i.jsx)(e.strong,{children:"build"})]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"stful cmd + i"}),"\n",(0,i.jsx)(e.li,{children:"stf 快速生成StatefulWidget"}),"\n",(0,i.jsx)(e.li,{children:"stl 快速生成StatelessWidget"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-dart",children:"import 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(\n    MaterialApp(\n    home:Row(children: [\n    Text('44'),//这里不会被热启动 不在build里面\n    Spacer(),\n    MyApp( ),\n    ],) \n    ),\n\n  );\n}\n// class MyApp(){\nclass MyApp extends StatefulWidget {\n  const MyApp({super.key});\n\n  @override\n  State<MyApp> createState() => _MyAppState();\n}\n\nclass _MyAppState extends State<MyApp> {\n  @override\n  Widget build(BuildContext context) {\n    return Text('abc');//不写return 就写成箭头函数\n  }\n}\n\n// }\n\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"state-not-working",children:["state not working",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#state-not-working",children:"#"})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-dart",children:"import 'package:flutter/cupertino.dart';\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(\n    MaterialApp(\n      home: Row(\n        children: [\n          Text('54'), //这里不会被热启动 不在build里面\n          Spacer(),\n          MyApp(),\n        ],\n      ),\n    ),\n  );\n}\n\nclass MyApp extends StatefulWidget {\n  const MyApp({super.key});\n\n  @override\n  State<MyApp> createState() => _MyAppState();\n}\n\nclass _MyAppState extends State<MyApp> {\n  int i = 0;\n  //热启动会刷新build方法里面的内容,不在build方法里面的内容不会被刷新\n  //build方法会把里面的内容,一层一层的向上返回,并且描述到屏幕上\n  @override\n  Widget build(BuildContext context) {\n    print('build 执行了');\n    return Row(\n      children: [\n        ElevatedButton(\n          onPressed: () {\n            print('btn click${++i}times');\n          },\n          child: Text(\"$i\"),\n        ),\n      ],\n    );\n  }\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"正确示范"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-dart",meta:'title="main.dart" {13-15}',children:'\xb7\xb7\xb7\nclass _MyAppState extends State<MyApp> {\n  int i = 0;\n  //热启动会刷新build方法里面的内容,不在build方法里面的内容不会被刷新\n  //build方法会把里面的内容,一层一层的向上返回,并且描述到屏幕上\n  @override\n  Widget build(BuildContext context) {\n    print("build执行了");\n    return Row(children: [\n      Text("${i}"),\n      ElevatedButton(onPressed: (){\n        print("按钮点击了${++i}");\n        setState(() {\n          print("abc");\n        });\n      }, child:Text("$i") )\n    ],);\n  }\n}\n\n'})}),"\n",(0,i.jsxs)(e.h3,{id:"stateless",children:["stateless",(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#stateless",children:"#"})]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"stl 快速生成StatelessWidget"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-dart",meta:'title="main.dart"{2,3}',children:'class Widget1 extends StatelessWidget{\n  // const Widget1({ super.key });//简写\n  const Widget1({Key? key}):super(key: key);//初始化列表的语法方法\n  @override\n  Widget build(BuildContext context) {\n    // TODO: implement build\n    return Text("000");\n  }\n\n}\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"快捷键"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"调出 Refactor 菜单。在 VS Code 中，您可以通过以下两种方式之一执行此操作："}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"右键点击要重构的代码段（在本例中为 Text），然后从下拉菜单中选择 Refactor...，\n或者"}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"将光标移到要重构的代码段上（在本例中为 Text），然后按下 Ctrl+. (Win/Linux) 或 Cmd+. (Mac)。"}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"在 Refactor 菜单中，选择 Extract Widget。指定一个名称，例如 BigCard，然后点击 Enter 键。"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"这会在当前文件的末尾自动创建一个新的 BigCard 类。"})]})}function s(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,r.ah)(),n.components);return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(l,{...n})}):l(n)}let d=s;s.__RSPRESS_PAGE_META={},s.__RSPRESS_PAGE_META["guides%2Finstall%2Fproject.mdx"]={toc:[{text:"const",id:"const",depth:2},{text:"scaffold",id:"scaffold",depth:2},{text:"build",id:"build",depth:2},{text:"state not working",id:"state-not-working",depth:3},{text:"stateless",id:"stateless",depth:3}],title:"flutter",headingTitle:"flutter",frontmatter:{}}}}]);