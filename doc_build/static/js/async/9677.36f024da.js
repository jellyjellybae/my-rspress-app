"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["9677"],{2784:function(e,n,t){t.r(n),t.d(n,{default:()=>o});var r=t(6773),s=t(453),l=t(7031);function i(e){let n=Object.assign({div:"div",p:"p",code:"code",h2:"h2",a:"a",h3:"h3",pre:"pre",strong:"strong",ul:"ul",li:"li",ol:"ol"},(0,s.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(l.default,{text:"一些常见的面试题"}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive note",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"NOTE"}),(0,r.jsx)(n.div,{className:"rspress-directive-content",children:(0,r.jsxs)(n.p,{children:["\n这是一个 ",(0,r.jsx)(n.code,{children:"note"})," 类型的 ",(0,r.jsx)(n.code,{children:"block"})]})})]}),"\n",(0,r.jsxs)(n.h2,{id:"防抖截流",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#防抖截流",children:"#"}),"防抖截流"]}),"\n",(0,r.jsxs)(n.h3,{id:"防抖",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#防抖",children:"#"}),"防抖"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            padding: 20px;\n        }\n        #inputField {\n            padding: 8px;\n            font-size: 16px;\n            width: 300px;\n        }\n        #output {\n            margin-top: 10px;\n            color: #333;\n        }\n        </style>\n</head>\n<body>\n    <h2>输入事件模拟（带防抖）</h2>\n    <input type="text" id="inputField" placeholder="请输入内容...">\n    <div id="output">结果将显示在这里</div>\n    <script src="./debounce.js"><\/script>\n</body>\n</html>\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// 防抖函数用于限制函数的执行频率，常用于处理高频触发的事件（如窗口调整、输入框输入等），确保在事件停止触发一段时间后才执行一次。\nfunction debounce(fn, delay) {\n    let timer = null\n    return function (...args) {\n        if (timer) {\n            clearTimeout(timer)\n        }\n        timer = setTimeout(() => {\n            fn(...args)\n            timer = null\n        }, delay)\n    }\n}\n// 获取 DOM 元素\nconst inputField = document.getElementById('inputField');\nconst output = document.getElementById('output');\n// 示例1: 模拟输入事件\nconst logInput = debounce((value) => {\n    output.textContent = `处理后的输入: ${value || '无内容'}`;\n    console.log(`输入值: ${value}`);\n}, 500);\n\n \n// 监听输入事件\ninputField.addEventListener('input', (event) => {\n    const value = event.target.value;\n    logInput(value);\n});\n// // 示例2: 窗口调整事件\nconst handleResize = debounce(() => {\n    console.log(\"窗口大小调整完成\");\n}, 300);\n\nwindow.addEventListener(\"resize\", handleResize); // 调整窗口时，只在停止调整 300ms 后执行\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"截流",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#截流",children:"#"}),"截流"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Document</title>\n\n</head>\n<body>\n    <input type="text" id="input">\n    <div id="content">content:</div>\n</body>\n<script type="text/javascript">\n    // 更清晰的实现（修正解构赋值问题）\nfunction handler() {\n    const inputElement = document.getElementById("input");\n    document.getElementById("content").innerHTML = `内容: ${inputElement.value}`;\n}\n\n// 标准节流函数实现（保留上下文绑定能力）\nconst throttle = (fn, wait) => {\n    let timer;\n    return function (...args) {\n        if (!timer) {\n            timer = setTimeout(() => {\n                fn.apply(this, args); // 绑定正确的 this 上下文\n                timer = null;\n            }, wait);\n        }\n    };\n};\ndocument.addEventListener(\'input\',throttle(handler,300))\n<\/script>\n</html>\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"区别",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#区别",children:"#"}),"区别"]}),"\n",(0,r.jsx)("table",{className:"block bord...",children:(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:["\n",(0,r.jsx)("th",{children:"维度"}),"\n",(0,r.jsx)("th",{children:"防抖(Debounce)"}),"\n",(0,r.jsx)("th",{children:"节流(Throttle)"}),"\n"]}),(0,r.jsxs)("tr",{children:["\n",(0,r.jsx)("td",{children:(0,r.jsx)(n.strong,{children:"核心目标"})}),"\n",(0,r.jsx)("td",{children:"确保最终状态稳定后执行"}),"\n",(0,r.jsx)("td",{children:"确保固定间隔内最多执行一次"}),"\n"]})]})}),"\n",(0,r.jsxs)("details",{children:[(0,r.jsx)("summary",{children:"\uD83D\uDCCC 使用场景说明"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"防抖"}),"：适用于需要等待用户停止操作后执行的场景（如搜索框输入联想）"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"节流"}),"：适用于需要限制操作频率的场景（如窗口resize事件、滚动事件）"]}),"\n"]})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",rel:"noopener noreferrer",target:"_blank",children:"继承和原型链"})}),"\n",(0,r.jsxs)(n.h2,{id:"promise",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#promise",children:"#"}),"Promise"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://blog.domenic.me/the-revealing-constructor-pattern/",rel:"noopener noreferrer",target:"_blank",children:" revealing constructor "}),"\nPromise 的实现"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"class MyPromise {\n  // Promise 构造函数，接收一个 executor 执行器函数\n  constructor(executor) {\n    // 初始状态为 pending，表示未完成状态\n    this.state = 'pending';\n    // 当状态变为 fulfilled 时存储成功结果\n    this.value = undefined;\n    // 当状态变为 rejected 时存储失败原因\n    this.reason = undefined;\n    // 存储异步执行时注册的成功回调\n    this.onFulfilledCallbacks = [];\n    // 存储异步执行时注册的失败回调\n    this.onRejectedCallbacks = [];\n\n    // 定义内部的 resolve 函数，负责将状态变为 fulfilled\n    const resolve = (value) => {\n      if (this.state === 'pending') {\n        this.state = 'fulfilled';\n        this.value = value;\n        // 异步调用所有成功的回调，保证 then 中的回调都是异步执行的\n        setTimeout(() => {\n          this.onFulfilledCallbacks.forEach(fn => fn(value));\n        }, 0);\n      }\n    };\n\n    // 定义内部的 reject 函数，负责将状态变为 rejected\n    const reject = (reason) => {\n      if (this.state === 'pending') {\n        this.state = 'rejected';\n        this.reason = reason;\n        // 异步调用所有失败的回调\n        setTimeout(() => {\n          this.onRejectedCallbacks.forEach(fn => fn(reason));\n        }, 0);\n      }\n    };\n\n    // 立即执行 executor，并传入 resolve 和 reject 函数\n    // 如果执行器抛出异常，则捕获异常并调用 reject\n    try {\n      executor(resolve, reject);\n    } catch (error) {\n      reject(error);\n    }\n  }\n\n  // then 方法实现：接收成功和失败的回调函数\n  then(onFulfilled, onRejected) {\n    // 如果用户没有提供对应的回调函数，则设置默认值\n    // 默认成功回调是返回传入的值，默认失败回调是将错误抛出\n    onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : value => value;\n    onRejected  = typeof onRejected  === 'function' ? onRejected  : reason => { throw reason };\n\n    // 返回一个新的 Promise 以实现链式调用\n    return new MyPromise((resolve, reject) => {\n      if (this.state === 'fulfilled') {\n        // 如果当前状态为 fulfilled，异步执行成功回调\n        setTimeout(() => {\n          try {\n            // 执行 onFulfilled 回调并获取返回值\n            const result = onFulfilled(this.value);\n            // 通过返回值 resolve 新的 Promise，实现链式传递\n            resolve(result);\n          } catch (error) {\n            // 如果回调中抛出异常，则调用 reject\n            reject(error);\n          }\n        }, 0);\n      } else if (this.state === 'rejected') {\n        // 如果当前状态为 rejected，异步执行失败回调\n        setTimeout(() => {\n          try {\n            const result = onRejected(this.reason);\n            resolve(result);\n          } catch (error) {\n            reject(error);\n          }\n        }, 0);\n      } else if (this.state === 'pending') {\n        // 如果当前状态为 pending，则将回调存入对应的队列中，等待状态改变后执行\n        this.onFulfilledCallbacks.push((value) => {\n          try {\n            const result = onFulfilled(value);\n            resolve(result);\n          } catch (error) {\n            reject(error);\n          }\n        });\n        this.onRejectedCallbacks.push((reason) => {\n          try {\n            const result = onRejected(reason);\n            resolve(result);\n          } catch (error) {\n            reject(error);\n          }\n        });\n      }\n    });\n  }\n}\n\n"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"状态管理与数据存储\n状态变量（state）\nPromise 内部有三个状态："}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"pending（等待）：初始状态，表示操作尚未完成。"}),"\n",(0,r.jsx)(n.p,{children:"fulfilled（已成功）：操作成功完成。"}),"\n",(0,r.jsx)(n.p,{children:"rejected（已拒绝）：操作失败。"}),"\n",(0,r.jsx)(n.p,{children:"结果存储\n当 Promise 状态改变时，成功的结果存储在 value 中，而失败的原因存储在 reason 中。这允许后续通过 then 方法获取对应的结果。"}),"\n",(0,r.jsx)(n.p,{children:"回调队列\n当 Promise 处于 pending 状态时，用户可能调用 then 注册回调函数。此时，由于 Promise 尚未完成，就无法立即执行回调，因此需要将成功回调存放在 onFulfilledCallbacks 数组中，将失败回调存放在 onRejectedCallbacks 数组中。"}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"构造函数和执行器\n执行器函数（executor）\n构造函数接收一个执行器 executor，并立即执行该函数，同时传入内部封装好的 resolve 和 reject 函数。如果 executor 中抛出异常，会自动调用 reject。"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"resolve 和 reject\n这两个方法只允许从 pending 状态转变到最终状态（fulfilled 或 rejected），这保证了 Promise 的状态一旦改变就不可再变。\n在状态改变后，通过 setTimeout 异步调用注册在回调队列中的回调函数，确保所有 then 中的回调都是异步执行的（符合规范）。"}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:"then 方法及链式调用\n参数处理\nthen 方法接受两个参数，分别为成功回调 onFulfilled 和失败回调 onRejected。如果用户没有传入相应的回调，会采用默认行为："}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"成功回调默认返回原值。"}),"\n",(0,r.jsx)(n.p,{children:"失败回调默认抛出错误，使错误能被后续的 catch 捕获。"}),"\n",(0,r.jsx)(n.p,{children:"状态处理\n在调用 then 时，根据当前 Promise 的状态："}),"\n",(0,r.jsx)(n.p,{children:"如果状态已经确定（fulfilled 或 rejected），则使用 setTimeout 异步调用相应的回调，并获取回调返回值，然后通过调用返回的新 Promise 的 resolve 或 reject 将结果传递出去。"}),"\n",(0,r.jsx)(n.p,{children:"如果状态还未确定（pending），则将回调函数存储到对应的队列中。一旦状态改变时，这些回调会被依次调用，并且通过返回值来决定新 Promise 的状态。"}),"\n",(0,r.jsx)(n.p,{children:"链式调用\n每次调用 then 都返回一个新的 Promise，这样就可以实现链式调用。通过在新 Promise 的 executor 内部，根据上一次的回调执行结果决定调用 resolve 还是 reject，从而使得结果能逐层传递。"}),"\n",(0,r.jsxs)(n.ol,{start:"4",children:["\n",(0,r.jsx)(n.li,{children:"异步执行\n为了确保 Promise 的行为符合规范，所有回调函数都要异步执行，即使 Promise 已经处于确定状态，也通过 setTimeout 延迟执行。这是为了保证在代码执行过程中，注册回调的代码先运行完成，从而避免同步调用带来的问题。"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"小结\n这个示例实现涵盖了 Promise 的基本特性："}),"\n",(0,r.jsx)(n.p,{children:"状态不可逆转：状态从 pending 转变为 fulfilled 或 rejected 后不会改变。"}),"\n",(0,r.jsx)(n.p,{children:"回调注册与执行：支持在状态未确定时注册回调，状态改变后异步执行所有对应回调。"}),"\n",(0,r.jsx)(n.p,{children:"异常处理：在执行器函数和回调中抛出的异常会正确捕获并传递给后续的 reject。"}),"\n",(0,r.jsx)(n.p,{children:"链式调用：通过 then 方法返回新的 Promise 实现链式调用，允许连续处理异步操作。"}),"\n",(0,r.jsxs)(n.h2,{id:"实例方法",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实例方法",children:"#"}),"实例方法"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Array.prototype.map()"})}),"\n",(0,r.jsx)(n.p,{children:"map() 方法创建一个新数组，这个新数组由原数组中的每个元素都调用一次提供的函数后的返回值组成。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"由于 map 创建一个新数组，在没有使用返回的数组的情况下调用它是不恰当的；应该使用 forEach 或 for...of 作为代替。"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const array1 = [1, 4, 9, 16];\n\n// 使用 map 方法\nconst map1 = array1.map(x => x * 2);\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"deepcopy",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#deepcopy",children:"#"}),"DeepCopy"]}),"\n",(0,r.jsx)(n.p,{children:"深拷贝（Deep Copy）是指创建一个对象的新副本，复制对象及其所有嵌套对象或数组的内容，新对象与原对象完全独立，互不影响。以下是几种实现深拷贝的常见方法，适用于 JavaScript："}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"JSON.parse(JSON.stringify(obj))"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const obj = { a: 1, b: { c: 2 } };\nconst deepCopy = JSON.parse(JSON.stringify(obj));\n\n// 修改副本不会影响原对象\ndeepCopy.b.c = 3;\nconsole.log(obj); // { a: 1, b: { c: 2 } }\nconsole.log(deepCopy); // { a: 1, b: { c: 3 } }\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"使用递归实现深拷贝"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'function deepCopy(obj, cache = new WeakMap()) {\n  // 处理 null 和非对象类型\n  if (obj === null || typeof obj !== \'object\') return obj;\n\n  // 处理循环引用\n  if (cache.has(obj)) return cache.get(obj);\n\n  // 处理数组\n  if (Array.isArray(obj)) {\n    const copy = [];\n    cache.set(obj, copy);\n    obj.forEach((item, index) => {\n      copy[index] = deepCopy(item, cache);\n    });\n    return copy;\n  }\n\n  // 处理普通对象\n  const copy = {};\n  cache.set(obj, copy);\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      copy[key] = deepCopy(obj[key], cache);\n    }\n  }\n  return copy;\n}\n\n// 示例\nconst obj = { a: 1, b: { c: 2 }, d: [1, 2] };\nobj.circular = obj; // 循环引用\nconst copy = deepCopy(obj);\ncopy.b.c = 3;\nconsole.log(obj); // 原对象不变\nconsole.log(copy); // 副本已修改\n///impove version\n \n[ WeakMap ](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap)\nfunction deepClone(obj, hashMap = new WeakMap()) {\n  // 如果传入的类型不对，则不做处理\n  if (typeof obj !== "object" || obj === null) {\n    return;\n  }\n  // 查缓存字典中是否已有需要克隆的对象，有的话直接返回同一个对象（同一个引用，不用递归无限创建进而导致栈溢出了）\n  if (hashMap.has(obj)) {\n    return hashMap.get(obj);\n  }\n  let newObj = {}; // 新对象\n  const dataKeys = Object.keys(obj); // 获取原对象所有键值\n  dataKeys.forEach((value) => {\n    const currentValue = obj[value];\n    // 基础类型直接赋值\n    if (typeof currentValue !== "object" || currentValue === null) {\n      newObj[value] = currentValue;\n    } else if (Array.isArray(currentValue)) {\n      // 实现数组的深拷贝\n      newObj[value] = [...currentValue];\n    } else if (currentValue instanceof Set) {\n      // 实现set数据的深拷贝\n      newObj[value] = new Set([...currentValue]);\n    } else if (currentValue instanceof Map) {\n      // 实现map数据的深拷贝\n      newObj[value] = new Map([...currentValue]);\n    } else if (currentValue instanceof Date) {\n      // 日期类型深拷贝\n      newObj[value] = new Date(currentValue.valueOf())\n    } else {\n      hashMap.set(obj, newObj); // 哈希表缓存新值\n      // 普通对象则递归赋值\n      newObj[value] = deepClone(currentValue,hashMap);\n    }\n\n  });\n  return newObj;\n}\n\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:"使用 Lodash 库的 cloneDeep 方法"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import _ from 'lodash';\n\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"4",children:["\n",(0,r.jsx)(n.li,{children:"使用 structuredClone 方法"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const obj = { a: 1, b: { c: 2 } };\nconst copy = structuredClone(obj);\n"})}),"\n",(0,r.jsx)(n.p,{children:"5.object.assign"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const obj = { a: 1, b: { c: 2 } };\nconst copy = Object.assign({}, obj);\n"})})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(i,e)})):i(e)}let o=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["guides%2Finterview%2Finterview.mdx"]={toc:[{id:"防抖截流",text:"防抖截流",depth:2},{id:"防抖",text:"防抖",depth:3},{id:"截流",text:"截流",depth:3},{id:"区别",text:"区别",depth:3},{id:"promise",text:"Promise",depth:2},{id:"实例方法",text:"实例方法",depth:2},{id:"deepcopy",text:"DeepCopy",depth:2}],title:"",headingTitle:"",frontmatter:{}}},7031:function(e,n,t){t.r(n),t.d(n,{default:()=>s});var r=t(6773);t(1699);let s=e=>{let{text:n}=e;return(0,r.jsx)("h1",{style:{fontSize:"2.5rem",fontWeight:"bold",color:"#333",textAlign:"center",margin:"20px 0",padding:"10px",borderBottom:"2px solid #eee"},children:n})}}}]);